apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "pelican-panel.fullname" . }}
  labels:
    {{- include "pelican-panel.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "pelican-panel.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "pelican-panel.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "pelican-panel.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: create-directories
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              echo "Creating required directories..."
              # Create directories for supervisord runtime
              mkdir -p /var/run/supervisord
              chown www-data:www-data /var/run/supervisord
              chmod 755 /var/run/supervisord

              # Create directories in data volume if enabled
              {{- if .Values.persistence.data.enabled }}
              mkdir -p /pelican-data/database
              mkdir -p /pelican-data/storage/avatars
              mkdir -p /pelican-data/storage/fonts
              chown -R www-data:www-data /pelican-data
              chmod -R 755 /pelican-data
              {{- end }}

              # Create directories in logs volume if enabled
              {{- if .Values.persistence.logs.enabled }}
              mkdir -p /var/www/html/storage/logs/supervisord
              chown -R www-data:www-data /var/www/html/storage/logs
              chmod -R 755 /var/www/html/storage/logs
              {{- end }}

              echo "Directories created successfully"
          securityContext:
            runAsUser: 0
            runAsGroup: 0
          volumeMounts:
            {{- if .Values.persistence.data.enabled }}
            - name: pelican-data
              mountPath: {{ .Values.persistence.data.mountPath }}
            {{- end }}
            {{- if .Values.persistence.logs.enabled }}
            - name: pelican-logs
              mountPath: {{ .Values.persistence.logs.mountPath }}
            {{- end }}
        {{- with .Values.initContainers }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/ash"]
          args: ["docker/entrypoint.sh", "supervisord", "-n", "-c", "/etc/supervisord.conf"]
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          envFrom:
            - configMapRef:
                name: {{ include "pelican-panel.fullname" . }}-config
            - secretRef:
                name: {{ include "pelican-panel.fullname" . }}-secret
            {{- with .Values.extraEnvFrom }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          env:
            {{- if .Values.cnpg.enabled }}
            - name: DB_CONNECTION
              value: "pgsql"
            - name: DB_HOST
              value: {{ include "pelican-panel.fullname" . }}-cnpg-rw
            - name: DB_PORT
              value: "5432"
            - name: DB_DATABASE
              value: "pelican"
            - name: DB_USERNAME
              value: "pelican"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "pelican-panel.fullname" . }}-cnpg-app
                  key: password
            {{- else if .Values.externalDatabase.enabled }}
            - name: DB_CONNECTION
              value: {{ .Values.externalDatabase.type | quote }}
            - name: DB_HOST
              value: {{ .Values.externalDatabase.host | quote }}
            - name: DB_PORT
              value: {{ .Values.externalDatabase.port | quote }}
            - name: DB_DATABASE
              value: {{ .Values.externalDatabase.database | quote }}
            - name: DB_USERNAME
              value: {{ .Values.externalDatabase.username | quote }}
            {{- if .Values.externalDatabase.existingSecret }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.externalDatabase.existingSecret }}
                  key: {{ .Values.externalDatabase.existingSecretPasswordKey | default "password" }}
            {{- else }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "pelican-panel.fullname" . }}-secret
                  key: database-password
            {{- end }}
            {{- end }}
            {{- if .Values.redis.enabled }}
            - name: REDIS_HOST
              value: {{ .Values.redis.host | quote }}
            - name: REDIS_PORT
              value: {{ .Values.redis.port | quote }}
            {{- if .Values.redis.existingSecret }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.redis.existingSecret }}
                  key: {{ .Values.redis.existingSecretPasswordKey | default "password" }}
            {{- else if .Values.redis.password }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "pelican-panel.fullname" . }}-secret
                  key: redis-password
            {{- end }}
            {{- end }}
            {{- with .Values.extraEnvVars }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /
              port: http
              httpHeaders:
              - name: Accept
                value: text/html
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /
              port: http
              httpHeaders:
              - name: Accept
                value: text/html
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: /
              port: http
              httpHeaders:
              - name: Accept
                value: text/html
            initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
            successThreshold: {{ .Values.startupProbe.successThreshold }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            {{- if .Values.persistence.data.enabled }}
            - name: pelican-data
              mountPath: {{ .Values.persistence.data.mountPath }}
            {{- end }}
            {{- if .Values.persistence.logs.enabled }}
            - name: pelican-logs
              mountPath: {{ .Values.persistence.logs.mountPath }}
            {{- end }}
            {{- with .Values.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
      volumes:
        {{- if .Values.persistence.data.enabled }}
        - name: pelican-data
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.data.existingClaim | default (printf "%s-data" (include "pelican-panel.fullname" .)) }}
        {{- end }}
        {{- if .Values.persistence.logs.enabled }}
        - name: pelican-logs
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.logs.existingClaim | default (printf "%s-logs" (include "pelican-panel.fullname" .)) }}
        {{- end }}
        {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
