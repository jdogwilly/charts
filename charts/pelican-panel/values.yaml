# Default values for pelican-panel.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/pelican-dev/panel
  pullPolicy: IfNotPresent
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext:
  fsGroup: 1000

securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false

service:
  type: ClusterIP
  port: 80
  targetPort: 80
  annotations: {}

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: pelican.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: pelican-tls
  #    hosts:
  #      - pelican.local

resources: {}
  # limits:
  #   cpu: 1000m
  #   memory: 2Gi
  # requests:
  #   cpu: 500m
  #   memory: 1Gi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Pelican Panel configuration
pelican:
  # Application settings
  appUrl: "https://pelican.local"
  appDebug: false
  appEnvironment: "production"
  appTimezone: "UTC"
  appLocale: "en"
  # appKey will be generated if not set
  appKey: ""
  
  # Admin user settings
  adminEmail: "admin@example.com"
  adminUsername: "admin"
  # adminPassword will be generated if not set
  adminPassword: ""
  
  # Session configuration
  sessionDriver: "file"
  sessionLifetime: "120"
  sessionEncrypt: false
  sessionPath: "/"
  sessionDomain: ""
  
  # Cache configuration
  cacheDriver: "file"
  
  # Queue configuration
  queueConnection: "sync"
  
  # Mail configuration
  mailDriver: "log"
  mailHost: ""
  mailPort: "587"
  mailUsername: ""
  mailPassword: ""
  mailEncryption: "tls"
  mailFromAddress: "noreply@pelican.local"
  mailFromName: "Pelican Panel"
  
  # Filesystem configuration
  filesystemDisk: "local"
  
  # Hash configuration
  hashDriver: "bcrypt"
  hashBcryptRounds: 10
  
  # Trusted proxies
  trustedProxies: "*"

# Persistence configuration
persistence:
  enabled: true
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 10Gi
  # existingClaim: ""
  
  # Separate volumes for different data types
  data:
    enabled: true
    size: 10Gi
    mountPath: /pelican-data
    # existingClaim: ""
  
  logs:
    enabled: true
    size: 5Gi
    mountPath: /var/www/html/storage/logs
    # existingClaim: ""

# PostgreSQL configuration using CloudNativePG
cnpg:
  enabled: true
  mode: standalone
  cluster:
    instances: 1
    primaryUpdateStrategy: "unsupervised"
    
    postgresql:
      parameters:
        max_connections: "200"
        shared_buffers: "256MB"
        effective_cache_size: "1GB"
        maintenance_work_mem: "64MB"
        checkpoint_completion_target: "0.9"
        wal_buffers: "16MB"
        default_statistics_target: "100"
        random_page_cost: "1.1"
        effective_io_concurrency: "200"
        work_mem: "4MB"
        min_wal_size: "1GB"
        max_wal_size: "2GB"
    
    monitoring:
      enabled: false
    
    superuserSecret:
      name: ""
    
    storage:
      storageClass: ""
      size: 10Gi
    
    resources: {}
      # limits:
      #   cpu: 1000m
      #   memory: 2Gi
      # requests:
      #   cpu: 500m
      #   memory: 1Gi

# Database configuration (used when cnpg.enabled is false)
externalDatabase:
  enabled: false
  type: "mysql" # mysql or pgsql
  host: ""
  port: 3306
  database: "pelican"
  username: "pelican"
  password: ""
  # existingSecret: ""
  # existingSecretPasswordKey: "password"

# Redis configuration
redis:
  enabled: false
  host: ""
  port: 6379
  password: ""
  # existingSecret: ""
  # existingSecretPasswordKey: "password"

# Extra environment variables
extraEnvVars: []
# - name: EXAMPLE_VAR
#   value: "example"

# Extra environment variables from secrets or configmaps
extraEnvFrom: []
# - secretRef:
#     name: my-secret
# - configMapRef:
#     name: my-configmap

# Additional volumes
extraVolumes: []
# - name: extra-volume
#   configMap:
#     name: extra-configmap

# Additional volume mounts
extraVolumeMounts: []
# - name: extra-volume
#   mountPath: /etc/extra
#   readOnly: true

# Init containers
initContainers: []
# - name: init-myservice
#   image: busybox:1.28
#   command: ['sh', '-c', 'echo "Init container"']

# Probes configuration
livenessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

readinessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

startupProbe:
  enabled: true
  initialDelaySeconds: 0
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 30
  successThreshold: 1